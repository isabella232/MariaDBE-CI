//
def jiraSite = 'MariaDB'
def jiraProject = 'TEST'
def shortVersion = '10.4'
def fullVersion = '10.4.13-7'
def realFullVersion
def realShortVersion
//
pipeline {
    agent { label 'master'  }
    environment {
        JIRA_SITE = "${jiraSite}"
    }
    stages {
        stage('Process Test results') {
            steps {
                echo "it works"
                cleanWs()
                copyArtifacts filter: '*.xml', fingerprintArtifacts: true, projectName: "${COMPLETED_JOB}", selector: lastCompleted()
                script {
                    def xmlFiles = findFiles(glob: '**/*.xml')
                    xmlFiles.each { reportFile ->
                        echo ("Processing " + reportFile.path)
                        def platform = reportFile.path.split('/')[-2].split(',')[-1].split('=')[-1]
                        echo ("Platform is " + platform)
                        def report = new XmlParser().parse(env.WORKSPACE + '/' + reportFile.path.toString())
                        def failedTests = report.'**'.testcase.findAll { testcase -> testcase.@status == "MTR_RES_FAILED" }
                        if (failedTests.size() > 0) {
                            failedTests.each { test ->
                                def testcase = test['@classname'] + "."+ test['@name']
                                def jiraQuery =  '(project = MDEV or project = MENT) and (status != Closed) AND summary ~ ' + testcase
                                // jiraQuery may return partially matching issues like galera_as_slave_gtid_myisam & galera_as_slave_gtid
                                def loggedIssuesSearch = jiraJqlSearch jql: jiraQuery, failOnError: true, maxResults: 3
                                echo loggedIssuesSearch.data.toString()

//                                def loggedIssuesSearch = jiraJqlSearch jql: jiraQuery, fields: ['key', 'summary'], failOnError: true, maxResults: 3

                                if (loggedIssuesSearch != null) {
                                def issues = loggedIssuesSearch.data.issues
                                if(issues.size() == 0){
                                  echo "Creating new ticket"
                                  def versions = jiraGetProjectVersions idOrKey: "${jiraProject}"
                                  def component = jiraGetComponent id: '15904'
                                  echo component.data.toString()

                                  def full_version_list = versions.data.findAll { it.name == "${fullVersion}" }
                                  if (full_version_list.size() == 0) {
                                    def newFullVersion = jiraNewVersion version: [name: "${fullVersion}", project: "${jiraProject}"]
                                    realFullVersion = newFullVersion.data
                                  } else { realFullVersion =  full_version_list.first() }

                                  def short_version_list = versions.data.findAll { it.name == "${shortVersion}" }
                                  if (short_version_list.size() == 0) {
                                    def newShortVersion = jiraNewVersion version: [name: "${shortVersion}", project: "${jiraProject}"]
                                    realShortVersion = newShortVersion.data
                                  } else { realShortVersion =  short_version_list.first() }

                                  def newIssue = [fields: [ // id or key must present for project.
                                                    project: [key: "${jiraProject}"],
                                                    summary: 'Failed test in Jenkins-CI: ' + testcase ,
                                                    fixVersions: [realShortVersion],
                                                    versions: [realFullVersion],
                                                    environment: "OS: ${platform}",
                                                    description: "Test failure observed during MTR run:\n\n{noformat}" + test.failure.text() + "{noformat}",
                                                    // id or name must present for issueType.
                                                    issuetype: [name: 'Bug']]]
                                  response = jiraNewIssue issue: newIssue
                                  echo response.successful.toString()
                                  echo response.data.toString()
                                }
                               }
                            }
                        }
                    }
                }
            }
        }
    }
}
